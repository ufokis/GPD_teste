var tipuesearch = {"pages":[{"title":" Teste_GPDs ","text":"Teste_GPDs Este programa testa as PDFs do LHAPDF Developer Info Eliton Trindade Gomes","tags":"home","loc":"index.html"},{"title":"GetMinMax – Teste_GPDs","text":"interface public  subroutine GetMinMax(i, xmin, xmax, q2min, q2max) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i double precision :: xmin double precision :: xmax double precision :: q2min double precision :: q2max","tags":"","loc":"interface/getminmax.html"},{"title":"GetXmax – Teste_GPDs","text":"interface public  subroutine GetXmax(i, xmax) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i double precision :: xmax","tags":"","loc":"interface/getxmax.html"},{"title":"GetXmin – Teste_GPDs","text":"interface public  subroutine GetXmin(i, xmin) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i double precision :: xmin","tags":"","loc":"interface/getxmin.html"},{"title":"evolvePDF – Teste_GPDs","text":"interface public  subroutine evolvePDF(x, Q, f) Arguments Type Intent Optional Attributes Name double precision :: x double precision :: Q double precision :: f (-6:6)","tags":"","loc":"interface/evolvepdf.html"},{"title":"InitPDFsetByName – Teste_GPDs","text":"interface public  subroutine InitPDFsetByName(name) Arguments Type Intent Optional Attributes Name character(len=64) :: name","tags":"","loc":"interface/initpdfsetbyname.html"},{"title":"InitPDF – Teste_GPDs","text":"interface public  subroutine InitPDF(i) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i","tags":"","loc":"interface/initpdf.html"},{"title":"Teste_GPDs – Teste_GPDs","text":"Interfaces interface public  subroutine GetMinMax(i, xmin, xmax, q2min, q2max) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i double precision :: xmin double precision :: xmax double precision :: q2min double precision :: q2max interface public  subroutine GetXmax(i, xmax) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i double precision :: xmax interface public  subroutine GetXmin(i, xmin) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i double precision :: xmin interface public  subroutine evolvePDF(x, Q, f) Arguments Type Intent Optional Attributes Name double precision :: x double precision :: Q double precision :: f (-6:6) interface public  subroutine InitPDFsetByName(name) Arguments Type Intent Optional Attributes Name character(len=64) :: name interface public  subroutine InitPDF(i) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i","tags":"","loc":"module/teste_gpds.html"},{"title":"main – Teste_GPDs","text":"Uses Teste_GPDs Variables Type Attributes Name Initial character(len=64) :: name double precision :: f (-6:6) double precision :: xmin double precision :: xmax double precision :: q2min double precision :: q2max double precision :: x double precision :: Q double precision :: alphasPDF double precision :: I1 double precision :: I2 double precision :: step integer :: num_steps character(len=20) :: arg integer :: i integer :: ix","tags":"","loc":"program/main.html"},{"title":"Teste_GPDs.f90 – Teste_GPDs","text":"Source Code ! Este módulo define uma interface para várias sub-rotinas ! relacionadas ao cálculo de funções de distribuição da biblioteca LHAPDF module Teste_GPDs implicit none ! Impede a declaração implícita de variáveis ! Definição da interface das sub-rotinas interface Subroutine GetMinMax ( i , xmin , xmax , q2min , q2max ) ! Sub-rotina para obter os valores mínimo e máximo das variáveis integer , intent ( in ) :: i ! Índice de entrada double precision :: xmin , xmax , q2min , q2max ! Variáveis para armazenar valores mínimo e máximo End Subroutine GetMinMax ! Sub-rotina para obter o valor máximo Subroutine GetXmax ( i , xmax ) integer , intent ( in ) :: i ! Índice de entrada double precision :: xmax ! Variável para armazenar o valor máximo End Subroutine GetXmax ! Sub-rotina para obter o valor mínimo Subroutine GetXmin ( i , xmin ) integer , intent ( in ) :: i ! Índice de entrada double precision :: xmin ! Variável para armazenar o valor mínimo End Subroutine GetXmin ! Sub-rotina para calcular a evolução da PDF Subroutine evolvePDF ( x , Q , f ) double precision :: x , Q , f ( - 6 : 6 ) ! Entradas e saída End Subroutine evolvePDF ! Sub-rotina para inicializar um conjunto de PDFs pelo nome Subroutine InitPDFsetByName ( name ) character ( 64 ) :: name ! Nome do conjunto de PDFs End Subroutine InitPDFsetByName ! Sub-rotina para inicializar um conjunto de PDFs pelo índice Subroutine InitPDF ( i ) integer , intent ( in ) :: i ! Índice do conjunto de PDFs End Subroutine InitPDF end interface end module Teste_GPDs","tags":"","loc":"sourcefile/teste_gpds.f90.html"},{"title":"main.f90 – Teste_GPDs","text":"Source Code program main use Teste_GPDs ! Importa o módulo Teste_GPDs que contém as sub-rotinas necessárias implicit none ! Impede a declaração implícita de variáveis ! Declaração das variáveis character ( 64 ) :: name ! Nome do conjunto de dados double precision f ( - 6 : 6 ), xmin , xmax , q2min , q2max , x , Q , alphasPDF , I1 , I2 ! Variáveis numéricas double precision :: step ! Tamanho do passo integer :: num_steps ! Número de passos character ( 20 ) :: arg ! Argumento da linha de comando integer :: i , ix ! Índices ! Inicializando os argumentos Q = 0.0d0 name = '' ! Analisando os argumentos da linha de comando do i = 1 , command_argument_count () call get_command_argument ( i , arg ) select case ( arg ) case ( \"-Q\" ) call get_command_argument ( i + 1 , arg ) read ( arg , * ) Q case ( \"-name\" ) call get_command_argument ( i + 1 , name ) end select end do ! Verificando se os argumentos necessários foram fornecidos if ( Q == 0.0d0 . or . name == '' ) then print * , \"Erro: Por favor, forneça o valor de Q e o nome do conjunto de dados.\" stop end if ! Inicialização do conjunto de dados pelo nome fornecido call InitPDFsetByName ( name ) ! Inicialização de um conjunto de PDFs call InitPDF ( 0 ) ! Obtendo os valores mínimos e máximos de x e Q2 call GetXmin ( 0 , xmin ) call GetXmax ( 0 , xmax ) ! Exibindo os valores mínimos e máximos de x e Q2 print * , 'xmin=' , xmin , ' xmax=' , xmax , ' Q2min=' , q2min , ' Q2max=' , q2max ! Adaptação para x variar de xmin a xmax com passo constante step = 0.0001d0 ! Defina aqui o tamanho do passo desejado num_steps = nint (( xmax - 1.d-7 ) / step ) ! Abertura dos arquivos de saída open ( unit = 2 , file = 'pdf1_' // trim ( name ) // '.dat' , status = 'unknown' ) open ( unit = 3 , file = 'pdf2_' // trim ( name ) // '.dat' , status = 'unknown' ) ! Loop para calcular e escrever os resultados do ix = 0 , num_steps x = 1.d-7 + real ( ix ) * step ! Calcula a evolução da PDF para o valor atual de x e Q call evolvePDF ( x , Q , f ) ! Calcula as integrais I1 e I2 I1 = f ( 0 ) I2 = ( sum ( f ( 1 : 4 )) + sum ( f ( - 1 : - 4 ))) / x ! Escreve os resultados nos arquivos de saída write ( 2 , * ) x , I1 write ( 3 , * ) x , I2 * 1.d-2 end do end program main","tags":"","loc":"sourcefile/main.f90.html"}]}